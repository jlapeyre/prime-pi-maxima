#####################################################################
# primesieve, optimized sieve of Eratosthenes implementation
#
# Author:        Kim Walisch
# Contact:       kim.walisch@gmail.com
# Created:       5 December 2010
# Last modified: 5 January 2012
#
# Project home:  http://primesieve.googlecode.com
######################################################################

Contents
========

  1. About primesieve
  2. What's in this source archive
  3. Implementation and algorithm complexity
  4. Source code documentation
  5. Further reading
  6. Thanks
  7. License
  8. References

1. About primesieve
===================

  primesieve is a free software program and C++ library that generates
  prime numbers and prime k-tuplets (twin primes, prime triplets, ...)
  < 2^64 using a highly optimized implementation of the sieve of
  Eratosthenes.

  Homepage: http://primesieve.googlecode.com

2. What's in this source archive
================================

  Installation file
  -----------------
  INSTALL  Explains how to compile primesieve.

  Documentation directory
  -----------------------
  docs                 files: CHANGES, TODO, BUGS, ...
  docs/LIBPRIMESIEVE   Explains how to build and use the primesieve
                       C++ library on Unix-like OSes and Windows.
  docs/USAGE_EXAMPLES  Contains commented source code examples that
                       show how to use PrimeSieve objects e.g. for
                       prime number generation.

  Source code directories
  -----------------------
  src/soe         Contains the sieve of Eratosthenes implementation.
  src/console     Contains the primesieve console application.
  src/qt-gui      Contains the primesieve Qt GUI application.
  src/expr        Contains an arithmetic expression parser used to
                  ease number input e.g. 2^32, 1E10, ...
  src/thirdparty  Contains stdint.h (needed for MSVC prior 2010)

3. Implementation and algorithm complexity
==========================================

  primesieve is written in C++03, the parallelization is implemented
  using OpenMP. It runs on both little-endian (i.e. x86, x64) and
  big-endian (i.e. PowerPC, SPARC, ...) CPUs.

  primesieve uses the segmented sieve of Eratosthenes with wheel
  factorization, this algorithm has a complexity of O(n log log n)
  operations and uses O(n^0.5) space.

  My implementation uses a compressed sieve array with 30 numbers per
  byte, the 8 bits of each byte hold the values i * 30 + k with
  k = {7, 11, 13, 17, 19, 23, 29, 31}. It further uses 8 bytes per
  sieving prime <= sqrt(x) that is 4 bytes for the sieving prime and
  another 4 bytes for the next multiple index and wheel index.

  primesieve's memory requirement (per thread) is about:
  pi(sqrt(x)) * 8 bytes + 400 kilobytes

4. Source code documentation (./src/soe)
========================================

  General information
  -------------------
  The src/soe directory contains the sieve of Eratosthenes source
  code, .h & .cpp files that start with a capital letter contain a
  class of the same name. The source code is quite well documented, a
  good starting point for code reading is PrimeSieve::sieve() in
  src/soe/PrimeSieve.cpp and then SieveOfEratosthenes.cpp. If you are
  not too familiar with prime sieving I recommend reading Jonathan
  Sorenson's papers, see section 5.

  C++ classes
  -----------
  * PrimeSieve & ParallelPrimeSieve (uses OpenMP)
    PrimeSieve objects provide an easy API for prime sieving, the file
    docs/USAGE_EXAMPLES contains a short tutorial.
    PrimeSieve::sieve() starts sieving the primes within the interval
    [startNumber_, stopNumber_], the following classes are all used
    directly or indirectly for sieving.

  * SieveOfEratosthenes (abstract class)
    Implementation of the segmented sieve of Eratosthenes using a bit
    array with 30 numbers per byte, each byte of the sieve array holds
    the numbers i * 30 + k with k = {7, 11, 13, 17, 19, 23, 29, 31}.
    The main method is SieveOfEratosthenes::sieve(uint32_t prime) it
    must be called consecutively for all primes <= sqrt(n) in order to
    sieve the primes up to n. Each sieving prime is first stored in
    one of the Erat(Small|Medium|Big) objects that are used to cross
    off its multiples.

  * EratSmall
    Segmented sieve of Eratosthenes algorithm with a hard-coded
    modulo 30 wheel that skips multiples of 2, 3 and 5. This algorithm
    is optimized for small sieving primes that have many multiples per
    segment. EratSmall is a further optimized implementation of Achim
    Flammenkamp's algorithm.[9]

  * EratMedium
    Segmented sieve of Eratosthenes algorithm with a fixed modulo 210
    wheel that skips multiples of 2, 3, 5 and 7. The wheel is
    implemented using a precomputed lookup table (wheel210Array from
    WheelFactorization.cpp). This algorithm is optimized for medium
    sieving primes with a few multiples per segment.

  * EratBig
    Segmented sieve of Eratosthenes algorithm with Tomás Oliveira's
    improvement for big sieving primes [11] and a fixed modulo 210
    wheel that skips multiples of 2, 3, 5 and 7. The wheel is
    implemented using a precomputed lookup table (wheel210Array from
    WheelFactorization.cpp). EratBig is optimized for big sieving
    primes that have less than one multiple occurrence per segment.

  * PrimeNumberGenerator (derived from SieveOfEratosthenes)
    Generates the primes up to sqrt(n) needed for sieving by
    PrimeNumberFinder.

  * PrimeNumberFinder (derived from SieveOfEratosthenes)
    Main SieveOfEratosthenes class, used to generate, print and count
    the primes and prime k-tuplets (twins, triplets, ...) within the
    interval [PrimeSieve::startNumber_, PrimeSieve::stopNumber_].

  * PreSieve
    PreSieve objects are used to pre-sieve multiples of small primes
    (e.g. <= 19) to speed up the sieve of Eratosthenes.

  Other files
  -----------
  * bithacks.h
    Contains fast bit manipulation functions needed in primesieve
    e.g. popcount(), bitScanForward(), floorLog2(), ...

  * defs.h
    Contains macro definitions and constants that set the size of
    various arrays and limits within primesieve. You can set the
    L1_DCACHE_SIZE, L2_CACHE_SIZE and BUCKET_SIZE constants according
    to your CPU specifications to get the best performance.

  * WheelFactorization.h
    Contains classes and structs related to wheel factorization (used
    to skip multiples of small primes to speed up the sieve of
    Eratosthenes). The abstract Wheel class is used to initialize
    sieving primes i.e. getWheelPrimeData() calculates the first
    multiple >= startNumber of each sieving prime. The sieving prime
    is then stored together with its multipleIndex (position of the
    next multiple within the sieve array) and wheelIndex as a
    WheelPrime object. Erat(Small|Medium|Big) objects use WheelPrimes
    to cross-off multiples.

5. Further reading
==================

  Jonathan Sorenson's papers provide a good introduction to prime
  number sieves, the sieve of Eratosthenes and segmentation are
  explained in [5], wheel factorization is covered in [6].
  Achim Flammenkamp's "The Art of Prime Sieving" [9] describes how to
  optimize the segmented sieve of Eratosthenes to effectively use the
  CPU's cache memory.
  Joerg Richstein in [10] (German language) describes how to pre-sieve
  multiples of small primes to speed up the sieve of Eratosthenes.
  Tomás Oliveira e Silva on his website [11] explains his improvement
  to the segmented sieve of Eratosthenes for big sieving primes.

6. Thanks
=========

  Thanks to Silver Möls for helping me to further optimize primesieve
  for out-of-order execution of modern CPUs in version 3.1.

  Thanks to Andrey Kulsha for benchmarking new primesieve releases on
  his hexa-core AMD Phenom CPU and also for his help to debug
  primesieve 1.0.

7. License
==========

  primesieve is free software, it is licensed under the New BSD
  License see the LICENSE file for more information. The primesieve
  GUI application in src/qt-gui is licensed under the GPLv3 as it
  uses the Qt framework.

8. References
=============

  [1] Richard C. Singleton, "An efficient prime number generator",
      Communications of the ACM 12, 563-564, 1969.
  [2] R. P. Brent, "The first occurrence of large gaps between
      successive primes", Mathematics of Computation, 27:959-963,
      1973.
  [3] C. Bays and R. Hudson, "The segmented sieve of Eratosthenes and
      primes in arithmetic progressions to 10^12", BIT 17:121 127,
      1977.
  [4] Paul Pritchard, "Fast compact prime number sieves (among 
      others)", Journal of Algorithms 4 (1983), 332-344.
  [5] J. Sorenson, "An Introduction To Prime Number Sieves", Computer
      Science Technical Report Vol. 909, January 1990.
  [6] J. Sorenson, "An analysis of two prime number sieves", Computer
      Science Technical Report Vol. 1028, June 1991.
  [7] J. Sorenson and I. Parberry, "Two Fast Parallel Prime Number
      Sieves", Information and Computation, Vol. 114, No. 1, 1994.
      http://larc.unt.edu/ian/pubs/sieve.pdf
  [8] J. Sorenson, "Trading Time for Space in Prime Number Sieves",
      Lecture Notes in Computer Science, Vol. 1423 (1998), 179-194.
  [9] Achim Flammenkamp, "The Art of Prime Sieving", 1998.
      http://wwwhomes.uni-bielefeld.de/achim/prime_sieve.html
 [10] Jörg Richstein, "Segmentierung und Optimierung von Algorithmen
      zu Problemen aus der Zahlentheorie", Gießen, Univ., Diss., 1999.
 [11] Tomás Oliveira e Silva, "Fast implementation of the segmented
      sieve of Eratosthenes", 2002.
      http://www.ieeta.pt/~tos/software/prime_sieve.html
